import pylatex
import dash
import dash_core_components as dcc
import dash_html_components as html

import plotly.graph_objects as go
import plotly.express as px
import pandas as pd


from .Dashboard import Dashboard


class StatisticsDashboard(Dashboard):

	def _generate_layout(self):
		# metrics inludings is checked inside method
		graph_list = [self._generate_table()]
		for graph in self.settings['graphs']:
			graph_list.append(self.graph_to_method[graph]())

		return html.Div(graph_list)

	def _generate_table(self, max_rows=10):
		df = self.pp.get_numeric_df(self.settings['data'])
		df = df.describe().reset_index()
		df = df[df['index'].isin(self.settings['metrics'])]
		df = df.rename(columns={"index": "metrics"})
		cols = df.columns
		markdown_text = '''
		Table illustrates main statistical characteristics of the sample.
		–°—Ä–µ–¥–Ω–µ–µ \n$\ \overline{x}=\ \\frac{\sum\limits_{i=1}^n\ x_i}{n}\ $
		–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ—á–µ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞), —è–≤–ª—è—é—â–∞—è—Å—è –º–µ—Ä–æ–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.


		–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ \n$SD=\sqrt{\\frac{\sum_{i=1}^{n}\ {\ \left(\ x_i-\overline{x}\ \\right)\ }^2}{n-1}}$
		–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –Ω–∞—à–µ–π –≤—ã–±–æ—Ä–∫–µ.
		–î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤–µ–ª–∏–∫ —Ä–∞–∑–±—Ä–æ—Å –≤–µ–ª–∏—á–∏–Ω—ã.


		–û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏ - –ß–∏—Å–ª–æ —Å–ª—É—á–∞–µ–≤, –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤ –≤—ã–±–æ—Ä–æ—á–Ω—É—é —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å.
		–û—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –º–æ—â–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞.



		–ö–≤–∞—Ä—Ç–∏–ª–∏ ‚Äì —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä—è–¥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ 25% –µ–¥–∏–Ω–∏—Ü —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –º–µ–Ω—å—à–µ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ $Q_1$;
		25% –±—É–¥—É—Ç –∑–∞–∫–ª—é—á–µ–Ω—ã –º–µ–∂–¥—É $Q_1$ –∏ $Q_2$; 25% - –º–µ–∂–¥—É $Q_2$ –∏ $Q_3$; –æ—Å—Ç–∞–ª—å–Ω—ã–µ 25% –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç $Q_3$.
		\n$Q_1=x_{Q_1}\ +i\ \\frac{{\\frac{1}{4}}\sum f_i\ -\ S_{Q_1-1}}{f_{Q_1}}\ $
		–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –Ω–∏–∂–Ω–∏–π –∫–≤–∞—Ä—Ç–∏–ª—å, i-—à–∞–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞,
		$ùëÜ_{ùëÑ_1‚àí1}$-–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É –Ω–∏–∂–Ω–∏–π –∫–≤–∞—Ä—Ç–∏–ª—å, $ùëì_{ùëÑ_1}$-—á–∞—Å—Ç–æ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –Ω–∏–∂–Ω–∏–π –∫–≤–∞—Ä—Ç–∏–ª—å.


		–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (—á–∏—Å–ª–∞), –Ω–µ –º–µ–Ω—å—à–µ–µ (–Ω–µ –º–µ–Ω—å—à–∏–µ), —á–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ.


		–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (—á–∏—Å–ª–∞), –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.
		'''

		for j in range(1, len(cols)):
			for i in range(len(df)):
				df.iloc[i, j] = float('{:.3f}'.format(float(df.iloc[i, j])))
		return html.Div([html.Div(html.H1(children='Desribe table'), style={'text-align': 'center'}),
						 html.Div([
							 html.Div([html.Table([
								 html.Thead(
									 html.Tr([html.Th(col)
											  for col in df.columns])
								 ),
								 html.Tbody([
									 html.Tr([
										 html.Td(df.iloc[i][col]) for col in df.columns
									 ]) for i in range(min(len(df), max_rows))
								 ]),

							 ])], style={'width': '48%', 'display': 'inline-block'}),
							 html.Div(dcc.Markdown(children=markdown_text), style={
								 'width': '48%', 'float': 'right', 'display': 'inline-block'})
						 ])
						 ], style={'margin': '50px'}
						)

	def _generate_linear(self):

		def update_graph(xaxis_column_name, yaxis_column_name,):
			fig = px.scatter(
				self.settings['data'], x=xaxis_column_name, y=yaxis_column_name)
			fig.update_xaxes(title=xaxis_column_name,
							 type='linear')
			fig.update_yaxes(title=yaxis_column_name,
							 type='linear')

			return fig

		self.app.callback(dash.dependencies.Output('linear_graph', 'figure'),
						  [dash.dependencies.Input('xaxis_column_name', 'value'),
						   dash.dependencies.Input('yaxis_column_name', 'value')])(update_graph)

		markdown_text = '''
		–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ –¥–≤—É–º —Å—Ç–æ–ª–±—Ü–∞–º (x –∏ y).
		'''

		df = self.pp.get_numeric_df(self.settings['data'])
		available_indicators = df.columns.unique()

		return html.Div([html.Div(html.H1(children='Graph'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),
						 html.Div([
							 html.Div([
								 dcc.Dropdown(
									 id='xaxis_column_name',
									 options=[{'label': i, 'value': i}
											  for i in available_indicators],
									 value=available_indicators[0]
								 )
							 ], style={'width': '48%', 'display': 'inline-block'}),
							 html.Div([
								 dcc.Dropdown(
									 id='yaxis_column_name',
									 options=[{'label': i, 'value': i}
											  for i in available_indicators],
									 value=available_indicators[1]
								 )
							 ], style={'width': '48%', 'float': 'right', 'display': 'inline-block'})
						 ]),
						 dcc.Graph(id='linear_graph')], style={'margin': '100px'}
						)

	def _generate_scatter(self):
		df = self.pp.get_numeric_df(self.settings['data'])
		# df.rename(columns=lambda x: x[:11], inplace=True)
		fig = px.scatter_matrix(df, width=700, height=700)
		markdown_text = '''
		–ù–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞—Ö —Ä–∞—Å—Å–µ—è–Ω–∏—è —Ä—è–¥ —Ç–æ—á–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–≤—É–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º. 
		–°–∏–ª–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ç–æ–º—É, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.
		'''
		return html.Div([html.Div(html.H1(children='Scatter matrix'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),
						 dcc.Graph(
			id='scatter_matrix',
			figure=fig
		)
		], style={'margin': '100px'})

	def _generate_heatmap(self):
		df = self.settings['data']
		numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
		df = df.select_dtypes(include=numerics)

		# df.rename(columns=lambda x: x[:11], inplace=True)
		fig = px.imshow(df)
		markdown_text = '''
		–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å 
		–º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ —Ä—è–¥–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º 
		–∏ –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–º —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã.
		'''
		return html.Div([html.Div(html.H1(children='Heat map'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),
						 dcc.Graph(
			id='heatmap',
			figure=fig
		)
		], style={'margin': '100px'})

	def _generate_corr(self, max_rows=10):
		df = self.pp.get_numeric_df(self.settings['data'])
		# df.rename(columns=lambda x: x[:11], inplace=True)
		df = df.corr()
		cols = df.columns
		for j in range(len(cols)):
			for i in range(len(df)):
				df.iloc[i, j] = float('{:.3f}'.format(float(df.iloc[i, j])))
		markdown_text = '''
		–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–ø–∞—Ä–Ω–æ. 
		–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚Äì —ç—Ç–æ –º–µ—Ä–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–æ–∂–µ—Ç 
		–∏–∑–º–µ–Ω—è—Ç—å—Å—è –æ—Ç -1.00 –¥–æ +1.00. –ó–Ω–∞—á–µ–Ω–∏–µ -1.00 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é, 
		–∑–Ω–∞—á–µ–Ω–∏–µ +1.00 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é. –ó–Ω–∞—á–µ–Ω–∏–µ 0.00 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. 
		'''
		return html.Div([html.Div(html.H1(children='Correlation'), style={'text-align': 'center'}),
						 html.Div([
							 html.Div([html.Table([
								 html.Thead(
									 html.Tr([html.Th(col)
											  for col in df.columns])
								 ),
								 html.Tbody([
									 html.Tr([
										 html.Td(df.iloc[i][col]) for col in df.columns
									 ]) for i in range(min(len(df), max_rows))
								 ])
							 ])], style={'width': '48%', 'display': 'inline-block'}),
							 html.Div(dcc.Markdown(children=markdown_text), style={
								 'width': '48%', 'float': 'right', 'display': 'inline-block'})
						 ])
						 ], style={'margin': '100px'})

	def _generate_box(self):
		df = self.pp.get_numeric_df(self.settings['data'])
		# df.rename(columns=lambda x: x[:11], inplace=True)
		fig = px.box(df)
		markdown_text = '''
		–î–∞–Ω–Ω—ã–π –≤–∏–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª–∏.
		–ü—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ö–æ–¥—è—Ç –∏–∑ —è—â–∏–∫–∞, –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è ¬´—É—Å–∞–º–∏¬ª –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–∏ —Ä–∞–∑–±—Ä–æ—Å–∞ 
		–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ –∫–≤–∞—Ä—Ç–∏–ª–µ–π
		'''
		return html.Div([html.Div(html.H1(children='Box plot'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),
						 dcc.Graph(
			id='box',
			figure=fig
		)
		], style={'margin': '100px'})

	def _generate_hist(self):
		# df.rename(columns=lambda x: x[:11], inplace=True)
		df = self.pp.get_numeric_df(self.settings['data'])
		fig = px.histogram(df)
		markdown_text = '''
		–î–∏–∞–≥—Ä–∞–º–º–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π —Ñ–æ—Ä–º–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–µ–ª–∏—á–∏–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∏–∑–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±–∏–∫–∞. 
		'''

		def update_hist(xaxis_column_name_hist):
			fig = px.histogram(
				self.settings['data'], x=xaxis_column_name_hist)
			fig.update_xaxes(title=xaxis_column_name_hist)

			return fig

		self.app.callback(dash.dependencies.Output('Histogram', 'figure'),
						  dash.dependencies.Input('xaxis_column_name_hist', 'value'))(update_hist)


		available_indicators = self.settings['data'].columns.unique()
		return html.Div([html.Div(html.H1(children='Histogram'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),

						 html.Div([
							 dcc.Dropdown(
								 id='xaxis_column_name_hist',
								 options=[{'label': i, 'value': i}
										  for i in available_indicators],
								 value=available_indicators[0]
							 )
						 ]),
						 dcc.Graph(id='Histogram')], style = {'margin': '100px'},
						)

	def _generate_box_hist(self):
		df = self.pp.get_numeric_df(self.settings['data'])
		fig_hist = px.histogram(df)
		fig_box = px.box(df)
		markdown_text = '''
		–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ –¥–∏–∞–≥—Ä–∞–º–º–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π —Ñ–æ—Ä–º–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–µ–ª–∏—á–∏–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∏–∑–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±–∏–∫–∞. 
		–í —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —è—â–∏–∫ —Å —É—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–≤–∞—Ä—Ç–∏–ª–∏. 
		–ü—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ö–æ–¥—è—Ç –∏–∑ —è—â–∏–∫–∞, –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è ¬´—É—Å–∞–º–∏¬ª –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–∏ —Ä–∞–∑–±—Ä–æ—Å–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ –∫–≤–∞—Ä—Ç–∏–ª–µ–π. 
		'''

		def update_hist(xaxis_column_name_box_hist):
			fig_hist = px.histogram(
				self.settings['data'], x=xaxis_column_name_box_hist)
			fig_hist.update_xaxes(title=xaxis_column_name_box_hist)

			return fig_hist

		self.app.callback(dash.dependencies.Output('Histogram_boxhist', 'figure'),
						  dash.dependencies.Input('xaxis_column_name_box_hist', 'value'))(update_hist)

		def update_box(xaxis_column_name_box_hist):
			fig_box = px.box(
				self.settings['data'], x=xaxis_column_name_box_hist)
			fig_box.update_xaxes(title=xaxis_column_name_box_hist)

			return fig_box

		self.app.callback(dash.dependencies.Output('Box_boxhist', 'figure'),
						  dash.dependencies.Input('xaxis_column_name_box_hist', 'value'))(update_box)

		available_indicators = self.settings['data'].columns.unique()
		return html.Div([html.Div(html.H1(children='Histogram'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),

						 html.Div([
							 dcc.Dropdown(
								 id='xaxis_column_name_box_hist',
								 options=[{'label': i, 'value': i}
										  for i in available_indicators],
								 value=available_indicators[0]
							 )
						 ]),
						 dcc.Graph(id='Histogram_boxhist'),
						 dcc.Graph(id='Box_boxhist')], style = {'margin': '100px'},
						)

	def _generate_log(self):
		markdown_text = '''	
		–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ –¥–≤—É–º —Å—Ç–æ–ª–±—Ü–∞–º (x –∏ y).
		'''
		def update_graph(xaxis_column_name_log, yaxis_column_name_log,):
			fig = px.scatter(
				self.settings['data'], x=xaxis_column_name_log, y=yaxis_column_name_log)
			fig.update_xaxes(title=xaxis_column_name_log,
							 type='log')
			fig.update_yaxes(title=yaxis_column_name_log,
							 type='log')

			return fig

		self.app.callback(dash.dependencies.Output('log_graph', 'figure'),
						  [dash.dependencies.Input('xaxis_column_name_log', 'value'),
						   dash.dependencies.Input('yaxis_column_name_log', 'value')])(update_graph)

		df = self.pp.get_numeric_df(self.settings['data'])
		available_indicators = df.columns.unique()

		return html.Div([
			html.Div([
						dcc.Markdown(children=markdown_text),
						html.Div([
							dcc.Dropdown(
								id='xaxis_column_name_log',
								options=[{'label': i, 'value': i}
										 for i in available_indicators],
								value=available_indicators[0]
							)
						], style={'width': '48%', 'display': 'inline-block'}),
						html.Div([
							dcc.Dropdown(
								id='yaxis_column_name_log',
								options=[{'label': i, 'value': i}
										 for i in available_indicators],
								value=available_indicators[0]
							)
						], style={'width': '48%', 'float': 'right', 'display': 'inline-block'})
						]),
			dcc.Graph(id='log_graph')]
		)

	def _generate_linlog(self):
		markdown_text = '''	
		–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ –¥–≤—É–º —Å—Ç–æ–ª–±—Ü–∞–º (x –∏ y).
		'''
		def update_graph(xaxis_column_name_linlog, yaxis_column_name_linlog,
						 xaxis_type_linlog, yaxis_type_linlog):
			fig = px.scatter(
				self.settings['data'], x=xaxis_column_name_linlog, y=yaxis_column_name_linlog)
			fig.update_xaxes(title=xaxis_column_name_linlog,
							 type='linear' if xaxis_type_linlog == 'Linear' else 'log')
			fig.update_yaxes(title=yaxis_column_name_linlog,
							 type='linear' if yaxis_type_linlog == 'Linear' else 'log')

			return fig

		self.app.callback(dash.dependencies.Output('linlog_graph', 'figure'),
						  [dash.dependencies.Input('xaxis_column_name_linlog', 'value'),
						   dash.dependencies.Input('yaxis_column_name_linlog', 'value')],
						  dash.dependencies.Input(
			'xaxis_type_linlog', 'value'),
			dash.dependencies.Input('yaxis_type_linlog', 'value'))(update_graph)

		df = self.pp.get_numeric_df(self.settings['data'])
		available_indicators = df.columns.unique()

		return html.Div([
			html.Div([
						dcc.Markdown(children=markdown_text),
						html.Div([
							dcc.Dropdown(
								id='xaxis_column_name_linlog',
								options=[{'label': i, 'value': i}
										 for i in available_indicators],
								value=available_indicators[0]
							),
							dcc.RadioItems(
								id='xaxis_type_linlog',
								options=[{'label': i, 'value': i}
										 for i in ['Linear', 'Log']],
								value='Linear'
							)
						], style={'width': '48%', 'display': 'inline-block'}),
						html.Div([
							dcc.Dropdown(
								id='yaxis_column_name_linlog',
								options=[{'label': i, 'value': i}
										 for i in available_indicators],
								value=available_indicators[0]
							),
							dcc.RadioItems(
								id='yaxis_type_linlog',
								options=[{'label': i, 'value': i}
										 for i in ['Linear', 'Log']],
								value='Linear'
							)
						], style={'width': '48%', 'float': 'right', 'display': 'inline-block'})
						]),
			dcc.Graph(id='linlog_graph')]

		)

	def _generate_piechart(self):
		df = self.pp.get_categorical_df(self.settings['data'])
		fig = px.pie(df)
		markdown_text = '''
		–î–∞–Ω–Ω—ã –≤–∏–¥ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã, 
		–≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
		'''

		def update_pie(xaxis_column_name_pie):
			df_counts = df[xaxis_column_name_pie].value_counts()
			df_unique = df[xaxis_column_name_pie].unique()
			fig = px.pie(
				df, values=df_counts, names=df_unique)
			fig.update_xaxes(title=xaxis_column_name_pie)

			return fig

		self.app.callback(dash.dependencies.Output('Pie Chart', 'figure'),
						  dash.dependencies.Input('xaxis_column_name_pie', 'value'))(update_pie)

		available_indicators = df.columns.unique()
		return html.Div([html.Div(html.H1(children='Pie Chart'), style={'text-align': 'center'}),
						 dcc.Markdown(children=markdown_text),

						 html.Div([
							 dcc.Dropdown(
								 id='xaxis_column_name_pie',
								 options=[{'label': i, 'value': i}
										  for i in available_indicators],
								 value=available_indicators[0]
							 )
						 ]),
						 dcc.Graph(id='Pie Chart')], style={'margin': '100px'}
						)

	def _generate_dotplot(self):
		df = self.settings['data']
		df_num = self.pp.get_numeric_df(df)
		df_cat = self.pp.get_categorical_df(df)
		available_indicators_num = df_num.columns.unique()
		available_indicators_cat = df_cat.columns.unique()
		fig = go.Figure()

		fig.update_layout(title="Dot Plot",
						  xaxis_title="Value",
						  yaxis_title="Number")

		markdown_text_dotplot = 'This is Dot Plot.'

		def update_dot(xaxis_column_name_dotplot, yaxis_column_name_dotplot):
			fig = px.scatter(
				df,
				x=xaxis_column_name_dotplot,
				y=yaxis_column_name_dotplot,
				title=xaxis_column_name_dotplot,
				labels={"xaxis_column_name_dotplot": "yaxis_column_name_dotplot"}
			)

			return fig

		self.app.callback(dash.dependencies.Output('Dot Plot', 'figure'),
						  dash.dependencies.Input('xaxis_column_name_dotplot', 'value'),
						  dash.dependencies.Input('yaxis_column_name_dotplot', 'value'))(update_dot)


		return html.Div([html.Div(html.H1(children='Dotplot'), style={'text-align': 'center'}),
					 dcc.Markdown(children=markdown_text_dotplot),

					 html.Div([
						 dcc.Markdown(children="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—å –û–•:"),
						 dcc.Dropdown(
							 id='xaxis_column_name_dotplot',
							 options=[{'label': i, 'value': i}
									  for i in available_indicators_num],
							 value=available_indicators_num[0]
						 ),
						 dcc.Markdown(children="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—å –ûY:"),
						 dcc.Dropdown(
							 id='yaxis_column_name_dotplot',
							 options=[{'label': i, 'value': i}
									  for i in available_indicators_cat],
							 value=available_indicators_cat[0]
						 )
					 ]),
					 dcc.Graph(id = 'Dot Plot', figure=fig)], style={'margin': '100px'}
					)